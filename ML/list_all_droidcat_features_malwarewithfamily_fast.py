# Import all classification package
from sklearn.ensemble import RandomForestClassifier, ExtraTreesClassifier, AdaBoostClassifier, BaggingClassifier, GradientBoostingClassifier, VotingClassifier
from sklearn.tree import DecisionTreeClassifier
from sklearn.svm import SVC
from sklearn.naive_bayes import GaussianNB, MultinomialNB, BernoulliNB
from sklearn.neighbors import KNeighborsClassifier

from sklearn.metrics import precision_score,recall_score,f1_score,roc_auc_score,accuracy_score

from sklearn.metrics import confusion_matrix

#from sklearn.mixture import GaussianMixture
#from sklearn.mixture import BayesianGaussianMixture
from sklearn.gaussian_process import GaussianProcessClassifier
from sklearn.gaussian_process.kernels import RBF

import numpy
import random
import os
import sys
import string

import inspect, re

from configs import *
from featureLoader import *
from handle_io import io

'''
datasets = [ {"zoo2010":"/home/hcai/Downloads/AndroZoo/2010"},
             {"zoo2011":"/home/hcai/Downloads/AndroZoo/2011"},
             {"zoo2012":"/home/hcai/Downloads/AndroZoo/2012", "malware2013":"/home/hcai/testbed/inputs/uniqMalware"},
             {"zoo2013":"/home/hcai/Downloads/AndroZoo/2013", "vs2013":"/home/hcai/Downloads/VirusShare/2013/", "malware-drebin":"/home/hcai/testbed/input/Drebin/all"},
             {"zoo2014":"/home/hcai/Downloads/AndroZoo/2014", "vs2014":"/home/hcai/Downloads/VirusShare/2014/"},
             {"zoo2015":"/home/hcai/Downloads/AndroZoo/2015", "vs2015":"/home/hcai/Downloads/VirusShare/2015/"},
             {"zoo2016":"/home/hcai/Downloads/AndroZoo/2016", "vs2016":"/home/hcai/Downloads/VirusShare/2016/"},
             {"zoo2017":"/home/hcai/Downloads/AndroZoo/2017", "malware2017":"/home/hcai/testbed/newmalwareall"} ]
'''

datasets = [ {"newzoo2011":"/home/hcai/Downloads/AndroZoo/2011/used"}, ]

'''

datasets = [ {"zoo2014":"/home/hcai/Downloads/AndroZoo/2014", "vs2014":"/home/hcai/Downloads/VirusShare/2014/"},
             {"zoo2015":"/home/hcai/Downloads/AndroZoo/2015", "vs2015":"/home/hcai/Downloads/VirusShare/2015/"},
             {"zoo2016":"/home/hcai/Downloads/AndroZoo/2016", "vs2016":"/home/hcai/Downloads/VirusShare/2016/"},
             {"zoo2017":"/home/hcai/Downloads/AndroZoo/2017", "malware2017":"/home/hcai/testbed/newmalwareall"} ]
'''

def varname(p):
    for line in inspect.getframeinfo(inspect.currentframe().f_back)[3]:
        m = re.search(r'\bvarname\s*\(\s*([A-Za-z_][A-Za-z0-9_]*)\s*\)', line)
        if m:
            return m.group(1)

def getsha256(fnapk):
    try:
        sha = subprocess.check_output(['sha256sum', fnapk])
    except Exception,e:
        print >> sys.stderr, "error occurred when executing sha256sum " + fnapk
    ret = string.split(sha.lower().lstrip().rstrip())
    if len(ret) < 2:
        print >> sys.stderr, "error in sha256sum of %s: %s" % (fnapk, sha)
        sys.exit(-1)

    return ret[0]

def getmd5(fnapk):
    return io.get_md5(fnapk)

def getpackname(fnapk):
    appname=None
    try:
        appname = subprocess.check_output([BIN_GETPACKNAME, fnapk])
    except Exception,e:
        print >> sys.stderr, "error occurred when executing getpackage.sh " + fnapk
    ret = string.split(appname.lstrip().rstrip(),'\t')
    if len(ret) < 2:
        return None

    return ret[1]

def get_families(path_md5_families):
    families = {}
    metainfo = open(path_md5_families)
    for line in metainfo.readlines():
        split = line.split()
        if len(split) == 2:
            md5 = str(split[0]).strip()
            date = str(split[1]).strip()
            families[md5] = date
    return families


def findFamily(apkdir, ml, mfam):
    newfam  = ml

    package2apk=dict()
    apk2md5 = dict()

    for apk in os.listdir(apkdir):
        if not (apk.endswith(".apk")):
            continue
        apkfn = os.path.abspath(apkdir+'/'+apk)
        packname = getpackname(apkfn)
        if packname == None:
            continue
        package2apk[packname] = apk
        apk2md5[apk] = getmd5(apkfn)

    for a in ml.keys():
        if a in mfam.keys():
            newfam[a] = mfam[a]
            continue
        # if a is the apk file name
        #if os.isfile( os.path.abspath(apkdir + '/' + a) ):
        if a in apk2md5.keys():
            if apk2md5[a] in mfam.keys():
                newfam[a] = mfam[ apk2md5[a] ]
            continue

        # if a is the package name of the app
        if a in package2apk.keys():
            if package2apk[a] in apk2md5.keys():
                md5 = apk2md5[ package2apk[a] ]
                if md5 in mfam.keys():
                    newfam[a] = mfam[ md5  ]
            continue

        print >> sys.stderr, "I don't understand the key of the feature vector: %s" % (a)

    return newfam

if __name__=="__main__":
    if len(sys.argv)>=2:
        g_binary = sys.argv[1].lower()=='true'


    fh = sys.stdout
    #fh = file ('confusion_matrix_formajorfamilyonly_holdout_all.txt', 'w')

    for i in range(0, len(datasets)):
        print "work on %s ... " % ( datasets[i] )

        (mft, mlt) = ({}, {})
        for tag in datasets[i].keys():
            (mf, ml) = loadMalwareNoFamily("features_droidcat/"+tag)
            mft.update (mf)

            mfam = get_families ("../ML/md5families/"+tag+".txt")
            newfam = findFamily (datasets[i][tag], ml, mfam)
            mlt.update ( newfam )

        #mfh = file ('malware-fam-%d.txt' % (2010+i), 'w')
        mfh = file ('malware-fam-new%d.txt' % (2011+i), 'w')
        for key in mft.keys():
            print >> mfh, "%s,%s,%s" % (key, mlt[key], mft[key])

        mfh.close()

    fh.flush()
    fh.close()

    sys.exit(0)

# hcai: set ts=4 tw=120 sts=4 sw=4
