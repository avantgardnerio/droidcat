# Import the Naive Bayes package
from sklearn.naive_bayes import GaussianNB, MultinomialNB, BernoulliNB
from sklearn.cross_validation import cross_val_score
from sklearn.metrics import precision_score,recall_score,f1_score,roc_auc_score,accuracy_score

import numpy
import random
import os
import sys
import string

from configs import *
from featureLoader import *

global g_accuracy,g_binary,g_distfunc

# 10-fold cross-validation
def cv(features, labels):
    global g_accuracy,g_binary,g_distfunc
    k=10
    #r=features.shape[0]
    r=len(features)
    subsize = r/k
    subsamples=list()
    sublabels=list()
    for j in range(0,k):
        subsamples.append( (features[j*subsize:(j+1)*subsize]) )
        sublabels.append( (labels[j*subsize:(j+1)*subsize]) )

    print "#sets of subsamples=" + str(len(subsamples)) + ", #sets of sublabels=" + str(len(sublabels))

    distfuncs = {'gaussian':GaussianNB(), 'multinomial':MultinomialNB(), 'bernoulli':BernoulliNB()}
    #nb = GaussianNB()
    #nb = MultinomialNB()
    #nb = BernoulliNB()
    nb = distfuncs[ g_distfunc ]

    score = 0.0
    precision = 0.0
    recall = 0.0
    f1s = 0.0
    for j in range(0,k):
        testFeatures = subsamples[j]
        testLabels = sublabels[j]
        trainFeatures = list()
        trainLabels = list()
        for r in range(0,k):
            if r==j:
                continue
            #trainFeatures.append( subsamples[r] )
            #trainLabels.append( sublabels[r] )
            for fl in subsamples[r]:
                trainFeatures.append(fl)
            for lal in sublabels[r]:
                trainLabels.append( lal )
        nb.fit( trainFeatures, trainLabels )

        if g_accuracy:
            curscore = nb.score( testFeatures, testLabels )
            print >> sys.stdout, "score of %d-fold cross-validation, repetition No. %d: %f" % (k,j,curscore)
            score += curscore
        else:
            y_pred = nb.predict( testFeatures )
            if g_binary:
                prec=precision_score(testLabels, y_pred, average='binary', pos_label='MALICIOUS')
                rec=recall_score(testLabels, y_pred, average='binary', pos_label='MALICIOUS')
                f1=f1_score(testLabels, y_pred, average='binary', pos_label='MALICIOUS')
            else:
                prec=precision_score(testLabels, y_pred, average='weighted')
                rec=recall_score(testLabels, y_pred, average='weighted')
                f1=f1_score(testLabels, y_pred, average='weighted')
                #accuracy=accuracy_score(testLabels, nb.predict( testFeatures ))
                '''
                print >> sys.stdout, "precision of %d-fold cross-validation, repetition No. %d: %f" % (k,j,prec)
                print >> sys.stdout, "recall of %d-fold cross-validation, repetition No. %d: %f" % (k,j,rec)
                print >> sys.stdout, "f1-measure of %d-fold cross-validation, repetition No. %d: %f" % (k,j,f1)
                #print >> sys.stdout, "accuracy of %d-fold cross-validation, repetition No. %d: %f" % (k,j,accuracy)
                '''

            precision += prec
            recall += rec
            f1s += f1

    if g_accuracy:
        print >> sys.stdout, "average score: " + str(score/k)
        cvscores = cross_val_score(estimator=nb, X=features, y=labels, cv=10)
        print >> sys.stdout, "auto cv average score: " + str(numpy.average(cvscores))
    else:
        print >> sys.stdout, "average precision: " + str(precision/k)
        print >> sys.stdout, "average recall: " + str(recall/k)
        print >> sys.stdout, "average f1: " + str(f1s/k)

        cvprec = cross_val_score(estimator=nb, X=features, y=labels, cv=10, scoring='precision_weighted')
        cvrec = cross_val_score(estimator=nb, X=features, y=labels, cv=10, scoring='recall_weighted')
        cvf1 = cross_val_score(estimator=nb, X=features, y=labels, cv=10, scoring='f1_weighted')
        print >> sys.stdout, "auto cv average precision: " + str(numpy.average(cvprec))
        print >> sys.stdout, "auto cv average recall: " + str(numpy.average(cvrec))
        print >> sys.stdout, "auto cv average f1: " + str(numpy.average(cvf1))

def selectCV(features, labels, selection):
    featureSelect=[idx-1 for idx in selection]
    print featureSelect
    selectedfeatures=list()
    for featureRow in features:
        selectedfeatures.append ( featureRow[ featureSelect ] )
    cv(selectedfeatures, labels)

if __name__=="__main__":
    global g_accuracy,g_binary,g_distfunc
    g_binary = False # binary or multiple-class classification
    g_accuracy = False # compute accuracy score or weighted precision/recall/F1-measure
    g_distfunc = "gaussian" # distribution function to be used for Naive Bayes probability computation
    if len(sys.argv)>=2:
        g_distfunc = sys.argv[1].lower()
    if len(sys.argv)>=3:
        g_binary = sys.argv[2].lower()=='true'
    if len(sys.argv)>=4:
        g_accuracy = sys.argv[3].lower()=='true'

    (features, labels, Testfeatures, Testlabels) = getTrainingData( g_binary )

    print "\n ****** FULL SET OF FEATURES ******"
    selectCV(features, labels, FSET_FULL)

    print "\n ****** GENERAL FEATURES ******"
    selectCV(features, labels, FSET_G)

    print "\n ****** ICC FEATURES ******"
    selectCV(features, labels, FSET_ICC)

    print "\n ****** SECURITY FEATURES ******"
    selectCV(features, labels, FSET_SEC)

    print "\n ****** Y SET OF FEATURES ******"
    selectCV(features, labels, FSET_Y)

    print "\n ****** Y&Y- SET OF FEATURES ******"
    selectCV(features, labels, FSET_YY)

    print "\n ****** Y&Y-&Y-- SET OF FEATURES ******"
    selectCV(features, labels, FSET_YYY)

    sys.exit(0)
# hcai: set ts=4 tw=100 sts=4 sw=4
