/** 
\mainpage Unified Dynamic Detection of Malicious Android Apps

Android malware detection has been extensively addressed yet mainly in a binary setting. That is, the detection 
approach results in a dichotomous decision reporting the given app as either benign or malicious without telling 
what kind of malware the app is if it is detected as malicious. More often than not, such a binary decision can
be far from being sufficient as it leaves users wondering how to understand the decision and what to do with the
app. As a complementary means, Android malware classification techniques arise to categorize an Android app if the 
app has already been confirmed as malware. Thus, users who want to detect and understand malware would have to use 
two sorts of tools in separate steps, potentially incurring excessive overheads and efforts in setting up and running
the tools (tool chain). More importantly, existing Android malware detection approaches and malware classification 
approaches largely rely on app characteristics (e.g., use of system calls) that are vulnerable to detection-evasion 
attacks (e.g., system-call obfuscation). In addition, the app characteristics used are usually homogeneous, making 
them susceptible to certain particular attacks.

These drawbacks of current techniques motivate the development of DroidCat, our novel approach to Android malware 
detection. DroidCat identifies characteristics in three orthogonal dimensions that represent run-time behavioral 
traits of Android apps and uses such these characteristics to build a diverse behavioral profile for each app. Then, 
with the profiles of a small set of sample apps covering benign and malicious apps, DroidCat trains a supervised 
learning model and employes the resulting multi-class classifier to predict a given unknown app to be not only just 
benign or malicious but giving specific malware family at the same time if the app is regarded as malicious. In other
words, DroidCat unifies the conventional, binary malware detection approach and the existing malware classification 
approach that takes an app that has been known as malware. An important strength of DroidCat is that, thanks to the 
diversity of the underlying heterogeneous features that constitute the behavioral profile, it is more robust to 
evarious known evasion attacks that exploits the reliance of existing approaches on the use of, among others, 
system calls and/or installation-time app permissions.

The app features underlying the DroidCat classifer are not proposed hypothetically or on the basis of heuristics. 
Rather, these features are discovered through a characterization study that reveals the behavioral differences between
malware and benign apps. By default, DroidCat uses 70 such features for training and testing using the Random Forest 
learning algorithm. Given an app under detection, DroidCat profiles it to compute the behavioral profile (i.e., the 70 features)
in 10 minutes, and then finishes the prediction in a couple of minutes. Since asymptotically the total cost of DroidCat 
is the profiling time which is constant across different apps, DroidCat is readily scalable to any real-world Android apps. 

This is the project homepage for DroidCat, where you can find the usage information and downloads of source code and 
evaluation dataset. DroidCat is implemented on top of Android App Dynamic Characterization Toolkit <a bref="http://chapering.github.io/droidfax">DroidFax</a>
and the Python Machine Learning Toolkit <a href="scikit-learn.org/">scikit-learn</a>. Our implementation also includes the implementation of DroidCat using other feature sets and 
popular learning algorithms like SVM with both linear and radial kernels, decision tree, nearest neighbours, and Naive Bayes with various probability 
distribution functions.

\section droidfax_use How to use DroidCat
- \subpage page_usage

\section droidfax_downloads Release Downloads
- <a href="../droidfax.jar"> Download DroidFax </a><br>
- <a href="../duafdroid.jar"> Download duafdroid </a><br>
- <a href="../libs.jar"> Download Soot and its libraries required </a><br>

\section droidfax_src Source Code
You can obtain the source code on <a href="https://bitbucket.org/haipeng_cai/droidfax/src">DroidFax source repository</a>, where all necessary inputs to DroidFax are hosted too (e.g., our manual callback categorization and our manually improved source and sink categorization).

\section droidfax_results Study Results
- <a href="https://bitbucket.org/haipeng_cai/droidfax/src/96e62f090542968427e87e9f5434a4e61719f49c/results/"> View the original experimental results </a><br>
- <a href="results.tar.gz"> Download original experimental results </a><br>
- \subpage page_resultformat

\section droidfax_benchmakr Inter-App Benchmark Suite
As a result of our study, we obtained a suite of Android app pairs in which the two apps have been confirmed to have 
inter-app ICCs that can be easily exercised with random inputs. We list the package names of each two apps and exercised 
inter-app ICC statistics.

*/

